[{"content":"总结 23年是我本科毕业地一年，是疫情结束的一年，研究生入学的一年。今年我读了很多本书，和她去了很多地方，我觉得这就是我这一年最宝贵的，最有价值的东西。\n书籍 就微信读书上，我就读了8本书《球状闪电》、《蛙》、《可能性的艺术》、《浅薄》、《浪潮之巅》、《置身事内》、《今日简史》等等，还有一些轻小说就不必翻出来讲了。其中大部分都是和社会相关的，批判现实的不公、贫富差距过大，还有讲述历史的优秀书籍。\n旅游 今年去了赣州、广州、舟山、宁波、青岛、长沙、桂林、阳朔、柳州，很可惜我不是一个喜欢拍照的人，没有保留几张好看的照片，就用文字浅浅地记录一下今年地旅行。\n为什么要去广州呢？因为她在，不在乎什么地点，其实只要有她就行，虽然去了很多次广州，但是丝毫没有厌倦这个城市，现在我还是怀念广州的美食：隆江猪脚饭、猪杂汤粉、牛肉稞条等等。最想的事情就是和她去吃海底捞，不知为什么，就是觉得在海底捞会很放松。广州的风土人情总让人很惬意。\n舟山，在舟山我的印象估计只有那次早早起床去海边看的日出了吧，很震惊呀，感觉生活就是为此而存在的。日出和大海，总给人一种希望，一天刚刚开始，一切皆有可能。\n宁波，我对宁波的印象估计也没啥，就只有酒店了吧😂。\n青岛，青岛是我夏天去过最舒服的地方了吧，沙滩，海风，和舒适的气温，真想一辈子在青岛玩了，可惜就是青岛是个旅游城市，人真的很多。\n长沙，橘子洲头，越往后人们应该会越来越想你吧。臭豆腐，黑色经典，传世美味，没有任何一个地摊能模仿。\n桂林、阳朔、柳州。山和水确实好看，别的话就是骑着小电动兜风，让我有在农村的感觉。\n展望 最近正在认真学习日语，认真地改变自己，我希望在明年的这个时候，也就是25年初我写年度总结的时候，我可以不看字幕地听懂同人音声（毕竟我学日语的初心就是同人音声），至少在多邻国学完第四章吧，学三章。\n我知道我的文笔很差劲，经常是上文不接下文，思维跳转很快，就多多看书、写文字，明年至少看个12本书吧🤭，写24篇博客哈🙂。\n学术进展缓慢，职业规划不完全。我身边有很多值得我学习的同学，值得我追赶的同学，以他们为榜样，加油💪。\n24年，少打一点游戏，如果不行就用VB脚本好好惩罚自己，毕竟VB确实很难关掉。\n","date":"2024-01-12T00:00:00Z","image":"https://loslisang.github.io/p/2023-summary/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://loslisang.github.io/p/2023-summary/","title":"2023 Summary"},{"content":"82. 删除排序链表中的重复元素 II\n题目描述 给定一个已排序的链表的头 head ， 删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表 。\n示例 题解 首先，链表是排序过的，所以相同的节点肯定是连续的，只需要遍历一遍就能把所有相同的节点删除\n记pre为去重链表的遍历节点itr的前一个节点。（我们从前往后遍历，前面的链表就是去除过后的链表）\n如果itr.val == itr.next.val，那我们就记flag为当前遍历节点的值，令flag=itr.val，不断向后遍历令itr = itr.next，直到，itr.next.val != flag 或者 itr.next == null。然后让pre.next = itr.next 如果itr.val != itr.next.val，那么就说明itr不是冗余节点，则不必删除，让pre = itr即可 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution{ public ListNode deleteDuplicates(ListNode head){ int flag = -101; ListNode dummyNode = new ListNode(); dummyNode.next = head; ListNode pre = dummyNode; ListNode itr = pre.next; while(itr != null \u0026amp;\u0026amp; itr.next != null){ if(itr.val == itr.next.val){ flag = itr.val; while(itr.next != null \u0026amp;\u0026amp; itr.next.val == flag){ itr = itr.next; } pre.next = itr.next; itr = pre.next; }else{ pre = itr; itr = itr.next; } } return dummyNode.next; } } 时间复杂度 O(n), 空间复杂度O(1)\n总结 链表的题通常需要注意两点：\n舍得用变量，千万别想着节省变量，否则容易被逻辑绕晕 head 有可能需要改动时，先增加一个 假head，返回的时候直接取 假head.next，这样就不需要为修改 head 增加一大堆逻辑了。 ","date":"2024-01-15T19:40:04+08:00","permalink":"https://loslisang.github.io/p/leetcode-82.-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii/","title":"LeetCode 82. 删除排序链表中的重复元素 II"},{"content":"题目描述 给定一个单链表 L 的头节点 head ，单链表 L 表示为：\nL0 → L1 → … → Ln - 1 → Ln\n请将其重新排列后变为：\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\n不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。 题解 解法一：暴力解 第i次循环都把最后一个节点移动到第2*i-1个节点后面，当然不是用for循环，只是代码运行的时候链表内部是这样的过程。\n记itr为从前往后遍历的节点，只要itr.next不为null，就一直做以下循环\n找到最后一个节点的前一个节点记为pre，最后一个节点记为last = pre.next\n把最后一个节点删除，插入到第itr的后面\npre.next = last.next; last.next = itr.next; itr.next = last\n令itr前移动两个单位itr = itr.next.next\n代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public ListNode lastPre(ListNode head){ ListNode itr = head; while (itr.next.next != null) { itr = itr.next; } return itr; } public void reorderList(ListNode head) { ListNode itr = head; while(itr != null \u0026amp;\u0026amp; itr.next != null){ ListNode pre = lastPre(head); ListNode last = pre.next; pre.next = last.next; last.next = itr.next; itr.next = last; itr = itr.next.next; } } } 时间复杂度 $O(N^2)$\n解法二 找中点，拆分链表 倒置后半段链表 合并两段链表 找中点（快慢指针法） eg1: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4\nfast:1 slow:1\nfast:3 slow:2\nfast.next.next为null，终止循环\n那么中点就记为mid = slow.next 为 3\neg2: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5\nfast:1 slow:1\nfast:3 slow:2\nfast:5 slow:3\nfast.next为null，终止循环\n那么中点就记为mid = slow.next 为 4\n拆分链表，slow.next = null;\n1 2 3 4 5 6 7 8 public ListNode getMid(ListNode head){ ListNode slow = head, fast = head; while(fast != null \u0026amp;\u0026amp; fast.next != null){ slow = slow.next; fast = fast.next.next; } return slow; } 倒置链表 记后半段链表为back，前半段链表为front\n倒置链表使用前插法\n1 2 3 4 5 6 7 8 9 10 11 public ListNode reverse(ListNode head){ ListNode itr = head; ListNode dummyHead = new ListNode(); while(itr != null){ ListNode temp = itr.next; itr.next = dummyHead.next; dummyHead.next = itr; itr = temp; } return dummyHead.next; } 合并链表 1 2 3 4 5 6 7 8 9 10 11 public ListNode merge (ListNode l1, ListNode l2) { ListNode head = l1; while(l2 != null \u0026amp;\u0026amp; l1 != null){ ListNode l1Next = l1.next; l1.next = l2; l2 = l2.next; l1.next.next = l1Next; l1 = l1.next.next; } return head; } 总结 链表的赋值，其实和变量交换很类似，都是需要备份的。 封装好功能的函数，远远比一整段写出来的代码要更好理解！！ 不用害怕定义变量，但是前提是你要知道这个变量是用来做什么的 ","date":"2024-01-15T19:32:06+08:00","permalink":"https://loslisang.github.io/p/leetcode-143.-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/","title":"LeetCode 143. 重排链表"},{"content":"说实话当一个老师还是不错的，但是前提是教的不是小学生。\n教学的收获 编程能力上的收获 感触最大的就是我有了一个大致的知识框架，什么OJ，无非就是学习基本语法之后去学数据结构和算法。我自己也在暑假的时候复习了一下动态规划和图的搜索，这一个是我编程能里最大的提升。CSP考试用的主要是C++语言，我不是很熟悉C++的语法和容器，有些代码就写的比较复杂。做题量其实也不算大，\n教学上的收获 因为我是作为一个老师去教学C++的知识，现在还主要是语法阶段，我感觉我教的就不算特别好，有些东西如果不在脑子里思考过一遍，还真的不一定能讲出来。\n有一次就是讲\u0026quot;添加逗号\u0026quot;的问题，我就语塞了，之前只是自己做出来了，但是根本没想过怎么讲这道题目，这是最大的问题。自己理解了，但是还没有理解完全，不能够正常讲出来，让同学们听懂。\n而且大班教学，很容易就产生能力不均匀的情况，很想把同学们统一起来讲，但是大家能力参差不齐，就会导致有些同学觉得太简单然后不听，进一步导致重要的东西他们没听到，我其实也很苦恼。\n之后我教课的流程应该会大大改变，例如：强调做题，强调理解，而不是抄代码，当然让他们不得不抄代码就是因为我教的不算好。\n讲题的步骤也可以进行改变，例如先做5min，然后讲思路，不写代码，再让他们做一会，最后写代码，不过这种教学方式应该对题目的要求比较大。\n让他们做笔记，我自己也可以把笔记再课堂上做好然后发给他们，当作上课的讲义嘛。\n遇到的一些事情 事件 这之中我遇到了一个同学，他上课看起来是在认真听课，但是实际上不是，也经常经常请假，导致在本身基础就不算好的情况，就完全跟不上课程的进度了。在最后的器模测试中，甚至连cout \u0026lt;\u0026lt; \u0026quot;ABCCD\u0026quot;;都写不出来，最后呢，他被其他同学说是“零分大王”，虽然其他同学并不知道他是谁，但是就在教室里一直讲，这一点非常不好，但是我却默许了这种行为，我觉得我做的实在是太差劲了，没能制止其他同学对他的霸凌，最后下课的路上，他打了其他同学一拳，这个时候我还不知道，然后我才发现他不对劲了，他很委屈。我真的需要对此做出反思。\n反思 如果要反思的话，首先得要怪我。我自己不是很懂小学生的思维，作为一个老师我是不合格的，我对我的教学对象的心理了解的太少了，这是最基本的。\n其次，绰号什么的，只有亲近的人说才会觉得舒服，如果是一个不认识的人这样说，只会认为是在嘲讽自己，我没有带入到他的处境里。现在仔细想想，给他起绰号的同学其实没啥恶意，但是没有把握好距离，如果他们俩是好朋友的话那应该没关系，问题就在于他们不是盆友。\n之后的打算 教学可能确实不太适合我，但是我从中得到了很多锻炼，很多是为人处世的，和很多家长进行沟通，教导小学生，这都不简单。\n之后我要提升自己的程序设计能力，就是多做OJ题，还要多写题解，争取让不懂的人也能看懂，这才是一个做老师的正确姿势。\n","date":"2024-01-14T18:38:40+08:00","image":"https://loslisang.github.io/94748376_p0.jpg","permalink":"https://loslisang.github.io/p/23%E5%B9%B4%E4%BF%A1%E6%81%AF%E5%A5%A5%E6%95%B0%E6%95%99%E5%AD%A6%E6%80%BB%E7%BB%93/","title":"23年信息奥数教学总结"},{"content":"值得细讲的点 Linux的Clash，因为在github上，clash删库跑路了，所以现存的clash压缩包 wget https://github.com/Dreamacro/clash/releases/download/v1.14.0/clash-linux-amd64-v1.14.0.gz\n建议自己也存一份\ncurl https://glados.rocks/tools/clash-linux.zip -o clash.zip\n解压(unzip) 上传配置文件(就是机场订阅链接下载下来的哪个yaml文件) 启动 ./clash-linux-amd64-v1.10.0 -f glados.yaml -d .\n设置环境变量 export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n参考 在 Linux 中使用 Clash | CodeSwift (iswiftai.com)\n","date":"2024-01-13T00:09:24+08:00","permalink":"https://loslisang.github.io/p/clash%E5%9C%A8linux%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/","title":"clash在Linux中如何使用"},{"content":"创建一个git仓库 git init git add (.) 提交到暂存区 git commit -m \u0026lt;\u0026gt;\ngit log \u0026lt;\u0026ndash;stat\u0026gt;\ngit diff \u0026lt;commit-id\u0026gt;\ngit reset --hard \u0026lt;commit-id\u0026gt;\ngit checkout \u0026lt;commit-id\u0026gt;\ngit branch\ngit checkout -b develop\n$master git merge develop\ngit config 修改某些属性 git config --global \u0026lt;properity\u0026gt; \u0026lt;value\u0026gt;\neg:\n1 2 3 4 5 6 7 git config --global user.name git config --global user.email git config --global http.sslverify false 关闭验证ssl证书 git config --global http.sslBackend schannel 查看属性 git config --list --show-origin\ngit clone 携带参数 eg: git -c http.sslVerify=false clone \u0026lt;URL\u0026gt;\n本地仓库和远程仓库绑定(远程分支) git remote remove origin\ngit remote add origin \u0026ldquo;https://github.com/LosLiSang/loslisang.github.io.git\"\n参考 迷途小书童的Note迷途小书童的Note (xugaoxiang.com)\n","date":"2024-01-11T00:00:00Z","permalink":"https://loslisang.github.io/p/git%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/","title":"git分布式管理工具使用"}]